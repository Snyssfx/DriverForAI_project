/*
   **************************************************************************
   * Judge for AI ("Connect Five" game).                               	    *
   *                                                                   	    *
   * This program should be used for Connect Five Competition.          	  *
   * Connect Five is the game like Connect Four; for more information see   *
   * http://www.math.spbu.ru/user/chernishev/connectfive/connectfive.html   *
   *                                                                   	    *
   * Author: Gleb Zakharov                                              	  *
   * Email: <last name><first name>i@gmail.com                         	    *
   * Year: 2015                                                        	    *
   * See the LICENSE.txt file in the project root for more information.     *
   **************************************************************************
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System.Diagnostics;
using System.Windows.Forms;

namespace DriverForAI
{
    class AIPlayer : IPlayer
    {
        private string name;
        private char symbol;
        private int numberOfWins;
        private int numberOfDraws;
        private int numberOfLoses;
        private string path;
        private double timeLimit;
        public AIPlayer(string path, string name)
        {
            this.path = path;
            this.name = name;
            numberOfWins = 0;
            numberOfDraws = 0;
            numberOfLoses = 0;
        }

        public String Name { get{ return name;} }
        public Int32 NumberOfDraws
        {
            get { return numberOfDraws;}
            set { numberOfDraws = value;}
        }

        public Int32 NumberOfLoses
        {
            get { return numberOfLoses;}
            set { numberOfLoses = value;}
        }

        public Int32 NumberOfWins
        {
            get{ return numberOfWins;}
            set{ numberOfWins = value;}
        }

        public Char Symbol
        {
            get{ return symbol;}
            set{ symbol = value;}
        }

        public String Path
        {
            get{ return path;}
            set{ path = value;}
        }

        public Int32 NumberOfPoints
        {
            get{ return 2 * NumberOfWins + NumberOfDraws;}
        }

        public Double TimeLimit
        {
            get {return timeLimit;}
            set {timeLimit = value;}
        }
        /// <summary>
        /// a method that reads a single AI's turn 
        /// </summary>
        /// <param name="numberOfWay">needed for file name that is generated by AI</param>
        /// <param name="Symbol">needed for file name that is generated by AI</param>
        /// <returns></returns>
        public String ReadTurn(Int32 numberOfWay, Char Symbol)
        {
            String way = null;
            var proc = new Process();
            string argsEXE;
            string wayToWay = path;
            wayToWay = Program.Path + @"\" + (Form1.currentGame + 1) + @"\" +
                Symbol.ToString() + @"\";
            argsEXE = wayToWay;
            argsEXE += " " + Symbol.ToString() + ' ' + (TimeLimit);
            wayToWay += Symbol + numberOfWay.ToString() + ".txt";
            proc.StartInfo.Arguments = argsEXE;
            proc.StartInfo.FileName = Path + '\\' + name + ".exe";
            double dt;
            proc.Start();
            Form1.doEvents();
            Thread.Sleep(700);
            do {
                Form1.doEvents();
                Thread.Sleep(15);
                if ( File.Exists(wayToWay) ) {
                    Form1.doEvents();
                    Thread.Sleep(500);
                    using ( var reader = new StreamReader(wayToWay) ) {
                        way = reader.ReadToEnd();
                    }
                }
                var dt1 = DateTime.Now.Subtract(proc.StartTime);
                dt = dt1.TotalMilliseconds;
            } while ( ((!File.Exists(wayToWay) && (dt <= TimeLimit))) );

            dt = DateTime.Now.Subtract(proc.StartTime).TotalMilliseconds;
            Form1.doEvents();
            Thread.Sleep(50);
            if ((!proc.HasExited) && ( dt > TimeLimit )) { 
                proc.Kill();
            }
            Thread.Sleep(20);
            if ( way != null ) {
                way = way[0].ToString();
                return way;
            } else
                return null;
        }

        /// <summary>
        /// write the current turn to AI's folder
        /// </summary>
        /// <param name="numberOfWay"></param>
        /// <param name="Symbol"></param>
        /// <param name="Way"></param>
        /// <param name="NumberOfGame"></param>
        public void WriteTurn(Int32 numberOfWay, Char Symbol, Int32 Way, Int32 NumberOfGame)
        {
            string name = "\\" + Symbol.ToString() + numberOfWay.ToString();
            using ( StreamWriter writer = new StreamWriter(Program.Path + '\\' + NumberOfGame + @"\" +
                    symbol + @"\" + Symbol + numberOfWay + ".txt", false) ) {
                writer.Write(Way.ToString());
            }
        }
    }
}
